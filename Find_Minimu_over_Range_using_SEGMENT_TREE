/* Akshay Jyani - IITJ */
// Segment Tree For the Minimum
/* ----- [l,r) -> r is not included ----- */

#include<bits/stdc++.h>
using namespace std;

#define int long long

struct segtree{
public:
	int sz ;
	vector<int> tree ;

	segtree(int n, vector<int> &a){
		sz = 1 ;
		while(sz < n) 
			sz *= 2 ;
		tree.assign(2 * sz, INT_MAX) ;
		build(a, 0, 0, sz) ;
	}

	void build(vector<int> &a, int x, int lx, int rx){
		if (rx - lx == 1){
			if (lx < a.size())
				tree[x] = a[lx] ;
			return ;
		}
		int m = (lx + rx)/2 ;
		build(a, 2*x + 1, lx, m) ;
		build(a, 2*x + 2, m, rx) ;
		tree[x] = min(tree[2*x + 1], tree[2*x + 2]) ;
	}

	void update(int i, int v, int x, int lx, int rx){
		if (rx - lx == 1){
			tree[x] = v ;
			return ;
		}
		int m = (lx + rx)/2 ;
		if (i < m)
			update(i, v, 2*x + 1, lx, m) ;
		else
			update(i, v, 2*x + 2, m, rx) ;
		tree[x] = min(tree[2*x + 1], tree[2*x + 2]) ;
	}

	void update(int i, int v){
		update(i, v, 0, 0, sz) ;
	}

	int minn(int l, int r, int x, int lx, int rx){
		if (lx >= r || l >= rx)
			return INT_MAX ;
		if (lx >= l && rx <= r)
			return tree[x] ;
		int m = (lx + rx)/2 ;
		int s1 = minn(l, r, 2*x+1, lx, m) ;
		int s2 = minn(l, r, 2*x+2, m, rx) ;
		return min(s1, s2) ;
	}

	int minn(int l, int r){
		return minn(l, r, 0, 0, sz) ;
	}
};

int32_t main(){
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	int n, m;
	cin>>n>>m ;
	vector<int> a(n) ;
	for(int i = 0 ; i < n ; i++){
		cin>> a[i] ;
	}
	segtree st(n, a) ;
	while(m--){
		int op ;
		cin>> op ;
		if (op == 1){
			int i, v ;
			cin>>i>>v ;
			st.update(i, v) ;
		}
		else{
			int l, r ;
			cin>>l>>r ;
			cout<< st.minn(l, r) << "\n" ;
		}
	}

	return 0 ;
}
