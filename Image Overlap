You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.

We translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images.

Note also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.

Return the largest possible overlap.

Code: 
 int largestOverlap(vector<vector<int>>& img1, vector<vector<int>>& img2) {
        int n=img1.size();
        int ans=0;
        for(int x=0;x<n;x++){
            for(int y=0;y<n;y++){
                int temp1=0;
                int temp2=0;
                int temp3=0;
                int temp4=0;
                for(int i=y;i<n;i++){
                    for(int j=x;j<n;j++){
                        if(img1[i][j]==1 && img2[i-y][j-x]==1){
                            temp1++;
                        }
                        if(img2[i][j]==1 && img1[i-y][j-x]==1){
                            temp2++;
                        }
                        if(img1[n-1-i][j]==1 && img2[n-1-i+y][j-x]==1){
                            temp3++;
                        }
                        if(img2[n-1-i][j]==1 && img1[n-1-i+y][j-x]==1){
                            temp4++;
                        }
                        
                    }
                }
                // cout<<temp<<endl;
                ans=max(ans,max(temp1,max(temp2,max(temp3,temp4))));
            }
        }
        return ans;
    }
